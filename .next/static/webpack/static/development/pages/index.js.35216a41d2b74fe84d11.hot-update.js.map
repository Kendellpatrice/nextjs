{"version":3,"file":"static/webpack/static/development/pages/index.js.35216a41d2b74fe84d11.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Layout from '../components/mylayout.js'\nimport Banner from '../components/banner.js'\nimport Image from '../components/image.js'\nimport SimpleText from '../components/simpletext.js'\nimport RichTextField from '../components/richtextfield.js'\nimport fetch from 'isomorphic-unfetch'\nimport Link from \"next/link\"\nimport Head from 'next/head'\nimport TwoColumn from '../components/twocolumn/layout.js'\n\nexport default class Dyn extends React.Component {\n  \n  static async getInitialProps({ query }) {\n    // Set the site language with a default of English\n    let page = ''\n    let siteLanguage = query.lang != null ? query.lang : 'en-AU';\n    let urlId = query.id != null ? query.id : '';\n    let siteName = query.site != null ? query.site : '';\n    \n    //console.log('entry=>' + window.location.href)\n    //console.log(window.location.href); \n\n    if (query.page != '/')\n      page = '/' + query.page;\n\n    if (page == '/undefined')\n      page = '/'\n\n    // Get Site Id / Name\n    var siteId = ''\n    switch (siteName) {\n      case 'ativo':\n        siteName = 'ativo'\n        siteId = '99757712-7a28-4ce5-94f3-82c2f936cbc6'\n        break;\n      default:\n        siteName = 'squealingpig'\n        siteId = 'e904f0cd-7f15-4773-807a-f35f322b18e8'\n        break;\n    }\n    \n    // Url for Root of CMS Tree, returning all nodes\n    const treeRootUrl = `https://c1.adis.ws/cms/content/query?query=%7b%22sys.iri%22:%22http://content.cms.amplience.net/${siteId}%22%7d&scope=tree&store=twe&fullBodyObject=true`\n    \n    // Get route from Data\n    var slugId = '';\n    var dataMenu = ''\n    await fetch(treeRootUrl)\n      .then(response => response.json())\n      .then(json => {\n        slugId = this.getCustomRoute(json, page)\n        dataMenu = json\n      })\n    \n    var pageId = ''\n    if(urlId!='')\n      pageId = urlId\n    else if(slugId!='')  \n      pageId = slugId\n    else \n      pageId = siteId\n    \n    const url = `https://c1.adis.ws/cms/content/query?query=%7b%22sys.iri%22:%22http://content.cms.amplience.net/${pageId}%22%7d&scope=tree&store=twe&fullBodyObject=true`\n    \n    const res = await fetch(url)\n    const data = await res.json()\n\n    return { data, dataMenu, siteName, siteLanguage, page }\n  }  \n\n  componentDidMount() {\n    console.log('window.innerHeight=>', window.innerHeight);\n  }\n\n  mapTypeToComponent = (typeName, componentProps, image, siteLanguage, componentList) => {\n    componentProps.siteLanguage = siteLanguage\n\n    switch(typeName) {\n      case 'https://raw.githubusercontent.com/janxl/nextjs/master/schemas/image.json':\n        return <Image {...componentProps} image={image} />\n      case 'https://raw.githubusercontent.com/janxl/nextjs/master/schemas/banner.json':\n        return <Banner {...componentProps} image={image} />\n      case 'https://raw.githubusercontent.com/janxl/nextjs/master/schemas/simpletextblock.json':\n        return  <SimpleText {...componentProps} />\n      case 'https://raw.githubusercontent.com/janxl/nextjs/master/schemas/richtextfield.json':\n        return <RichTextField {...componentProps} />\n      case 'https://raw.githubusercontent.com/janxl/nextjs/master/schemas/twocolumncontainer.json':\n        return <TwoColumn {...componentProps} componentList={componentList} siteLanguage={siteLanguage} />\n    }\n  }\n\n  // This method gets custom routes by looking up the nav path and finding the id\n  static getCustomRoute = (data, path) => {\n    if (path == null || path == '')\n      path = '/'\n\n    let componentList = data['@graph']\n    const componentProps = componentList.find((item) => item['slug'] === path)\n    \n    if (componentProps != null){\n      let componentId = componentProps.page['@id']\n      if (componentId.length >= 0){\n        let parts = componentId.split('/')\n        if (parts.length >= 0){\n          return parts[parts.length - 1]\n        }\n      }\n    }\n    return ''\n  }\n\n  getComponentProps = (componentId, componentList) => {\n    return componentList.find((item) => item['@id'] === componentId)\n  }\n\n  getGuidFromId(componentId){\n    if (componentId.length >= 0){\n      let parts = componentId.split('/')\n      \n      if (parts.length >= 0){\n        return parts[parts.length - 1]\n      }\n    }\n    return ''\n  }\n\n  getMenu(menuComponentList, siteName){\n    const { url } = this.props\n\n    if (menuComponentList[0].slugs != null ){\n\n      return <React.Fragment>\n      {\n        menuComponentList[0].slugs.map((item, index) => {\n          const componentProps = this.getComponentProps(item['@id'], menuComponentList)\n          \n          let pageId = this.getGuidFromId(componentProps.page['@id'])\n          let navUrl = `/index?site=${siteName}&id=${pageId}`\n          let customRoute = navUrl\n          \n          return <Link prefetch href={customRoute} as={componentProps.slug} key={`key-${index}`}>\n            <a className={`c-nav__item ${url.asPath === customRoute ? 'active' : ''}`}>{componentProps.navLabel != null ? componentProps.navLabel.values[0].value : ''}</a>\n          </Link>\n        }\n      )}</React.Fragment>\n    }\n  }\n\n  render() {\n    const { data, dataMenu, siteLanguage, siteName } = this.props\n    const componentList = data['@graph']\n    const menuComponentList = dataMenu['@graph']\n    const imageList = componentList.filter((item) => item.mediaType === 'image')\n    \n    return (\n      <div>\n        <Head>\n          <title>Treasure Wine Estates - {siteName}</title>\n          <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossOrigin=\"anonymous\" />\n          <link rel=\"stylesheet\" href={`../static/styles/${siteName}/styles.css`} crossOrigin=\"anonymous\" />\n        </Head>\n        <div className='c-site-wrapper'>\n          <nav className='nav'>\n            <div className=\"c-nav\">\n              {\n                this.getMenu(menuComponentList, siteName)\n              }\n            </div>\n          </nav>\n          <Layout>\n            { componentList[0] && componentList[0].slotContent ? componentList[0].slotContent.map((item, index) => {\n                let image = null\n                const componentProps = this.getComponentProps(item['@id'], componentList)\n\n                if (componentProps.background || componentProps.image) {\n                  image = imageList.find((imageItem) => (componentProps.background && imageItem['@id'] === componentProps.background['@id']) || (componentProps.image && imageItem['@id'] === componentProps.image['@id']))\n                }\n\n                return <div key={`key-${index}`}>\n                  {this.mapTypeToComponent(item['@type'], componentProps, image, siteLanguage, componentList)}\n                </div>\n            }) : null}\n          </Layout>\n        </div>\n      </div>\n    )\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAgEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAYA;AACA;AAqBA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AA5CA;AACA;AACA;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;;;;;;;;;;;;;;AA9KA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;;;;AACA;AACA;;;;AAGA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AACA;AAOA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA1DA;AACA;AADA;AAmFA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}